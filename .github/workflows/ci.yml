name: MSBuild

on:
  push:
    branches: [ "Test" ]
  pull_request:
    branches: [ "Test" ]

env:
  DEVENV_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE
  DEVENV_PATH2: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.com
  QT_PATH: C:\Qt\6.6.1\msvc2019_64

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Check out the main project repository
    - name: Check out the main project repository
      uses: actions/checkout@v4
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

    # Step 2: Check out the repository where the workflow file is located (assumed same repository)
    - name: Check out the repository with workflow
      uses: actions/checkout@v4
      with:
        ref: Test
        path: WorkflowRepo

    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: ThirdParty
        fetch-depth: 1  # Limit fetching to the last commit

        
    # Step 3: Install Rust 1.76.0
    - name: Install Rust 1.76.0
      run: |
        choco install rust --version=1.76.0 -y
      shell: cmd

    # Step 4: Install Qt using install-qt-action
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.6.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Add Visual Studio to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    # Step 5: Copy QtMsBuild directory to %LOCALAPPDATA%
    - name: Copy QtMsBuild directory
      run: |
        echo "Copying QtMsBuild directory to %LOCALAPPDATA%..."
        xcopy /E /I "%GITHUB_WORKSPACE%\WorkflowRepo\QtMsBuild" "%LOCALAPPDATA%\QtMsBuild"

    # Step 6: Import Qt version registry settings
    - name: Import Qt Version Registry
      run: |
        echo "Importing Qt version registry settings..."
        reg import "%GITHUB_WORKSPACE%\WorkflowRepo\QT_Version.reg"

    # Step 7: Set environment variables
    - name: Set Environment Variables
      run: |
        set QtMsBuild=%LOCALAPPDATA%\QtMsBuild
        set DefaultQtVersion=C:\Qt\6.6.1\msvc2019_64
      shell: cmd

    - name: Debug - List repository files
      run: dir /s
      shell: cmd

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14' # specify the version you need

    - name: Install Yarn
      run: npm install -g yarn

    - name: Install dependencies
      run: yarn install
      
    # Install Python and Sphinx
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Sphinx and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Setup and Execute Build
      shell: cmd
      run: |
        echo "Current directory: %cd%"
        set OPENTWIN_DEV_ROOT=%cd%\OpenTwin
        set DEVENV_ROOT_2022=%DEVENV_PATH%
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\ThirdParty
        set QT_ROOT_DIR=%QT_PATH%
        set PATH=%QT_ROOT_DIR%\bin;%PATH%
        set QTDIR=%QT_ROOT_DIR%
        set QMAKESPEC=win32-msvc
        set QT_PLUGIN_PATH=%QT_ROOT_DIR%\plugins
        set QtMsBuild=%LOCALAPPDATA%\QtMsBuild
        set DefaultQtVersion=%QT_ROOT_DIR%
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%"
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%"
        echo "OPENTWIN_THIRDPARTY_ROOT=%OPENTWIN_THIRDPARTY_ROOT%"
        echo "QT_ROOT_DIR=%QT_ROOT_DIR%"
        echo "Checking directories and necessary files..."
        echo "OpenTwin directory: %OPENTWIN_DEV_ROOT%"
        dir %OPENTWIN_DEV_ROOT%
        echo "Visual Studio 2022 directory: %DEVENV_ROOT_2022%"
        dir "%DEVENV_ROOT_2022%"
        echo "Qt directory: %QT_ROOT_DIR%"
        dir "%QT_ROOT_DIR%"
        echo "Checking if BuildAll.bat exists..."
        echo "Starting BuildAll.bat..."
        "%DEVENV_ROOT_2022%\devenv.com" "%OPENTWIN_DEV_ROOT%\Libraries\OTWidgets\OTWidgets.vcxproj" /Build "Debug|x64"

    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-Debug
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Debug.txt

    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-Release
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Release.txt

    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-summary
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Summary.txt
